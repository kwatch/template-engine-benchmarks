// Autogenerated Jamon proxy
// T:/tmp/template-engine-benchmarks/java/templates/jamon/stocks.jamon

package jamon;

// 2, 3
import teb.model.Stock;

@org.jamon.annotations.Template(
  signature = "7CB9D0F58EF4EF1CFCB571F12DC846AD",
  requiredArguments = {
    @org.jamon.annotations.Argument(name = "items", type = "java.util.List<Stock>")})
public class stocks
  extends org.jamon.AbstractTemplateProxy
{
  
  public stocks(org.jamon.TemplateManager p_manager)
  {
     super(p_manager);
  }
  
  protected stocks(String p_path)
  {
    super(p_path);
  }
  
  public stocks()
  {
     super("/jamon/stocks");
  }
  
  public interface Intf
    extends org.jamon.AbstractTemplateProxy.Intf
  {
    
    void renderNoFlush(final java.io.Writer jamonWriter) throws java.io.IOException;
    
  }
  public static class ImplData
    extends org.jamon.AbstractTemplateProxy.ImplData
  {
    // 5, 3
    public void setItems(java.util.List<Stock> items)
    {
      // 5, 3
      m_items = items;
    }
    public java.util.List<Stock> getItems()
    {
      return m_items;
    }
    private java.util.List<Stock> m_items;
  }
  @Override
  protected org.jamon.AbstractTemplateProxy.ImplData makeImplData()
  {
    return new ImplData();
  }
  @Override public ImplData getImplData()
  {
    return (ImplData) super.getImplData();
  }
  
  
  @Override
  public org.jamon.AbstractTemplateImpl constructImpl(Class<? extends org.jamon.AbstractTemplateImpl> p_class){
    try
    {
      return p_class
        .getConstructor(new Class [] { org.jamon.TemplateManager.class, ImplData.class })
        .newInstance(new Object [] { getTemplateManager(), getImplData()});
    }
    catch (RuntimeException e)
    {
      throw e;
    }
    catch (Exception e)
    {
      throw new RuntimeException(e);
    }
  }
  
  @Override
  protected org.jamon.AbstractTemplateImpl constructImpl(){
    return new stocksImpl(getTemplateManager(), getImplData());
  }
  public org.jamon.Renderer makeRenderer(final java.util.List<Stock> items)
  {
    return new org.jamon.AbstractRenderer() {
      @Override
      public void renderTo(final java.io.Writer jamonWriter)
        throws java.io.IOException
      {
        render(jamonWriter, items);
      }
    };
  }
  
  public void render(final java.io.Writer jamonWriter, final java.util.List<Stock> items)
    throws java.io.IOException
  {
    renderNoFlush(jamonWriter, items);
    jamonWriter.flush();
  }
  public void renderNoFlush(final java.io.Writer jamonWriter, final java.util.List<Stock> items)
    throws java.io.IOException
  {
    ImplData implData = getImplData();
    implData.setItems(items);
    Intf instance = (Intf) getTemplateManager().constructImpl(this);
    instance.renderNoFlush(jamonWriter);
    reset();
  }
  
  
}
